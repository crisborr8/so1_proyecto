// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: SendMatches/Match.proto

package services_matchpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendMatchesClient is the client API for SendMatches service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendMatchesClient interface {
	SendMatch(ctx context.Context, in *Match, opts ...grpc.CallOption) (*Confirm, error)
}

type sendMatchesClient struct {
	cc grpc.ClientConnInterface
}

func NewSendMatchesClient(cc grpc.ClientConnInterface) SendMatchesClient {
	return &sendMatchesClient{cc}
}

func (c *sendMatchesClient) SendMatch(ctx context.Context, in *Match, opts ...grpc.CallOption) (*Confirm, error) {
	out := new(Confirm)
	err := c.cc.Invoke(ctx, "/SendMatches/SendMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendMatchesServer is the server API for SendMatches service.
// All implementations must embed UnimplementedSendMatchesServer
// for forward compatibility
type SendMatchesServer interface {
	SendMatch(context.Context, *Match) (*Confirm, error)
	mustEmbedUnimplementedSendMatchesServer()
}

// UnimplementedSendMatchesServer must be embedded to have forward compatible implementations.
type UnimplementedSendMatchesServer struct {
}

func (UnimplementedSendMatchesServer) SendMatch(context.Context, *Match) (*Confirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMatch not implemented")
}
func (UnimplementedSendMatchesServer) mustEmbedUnimplementedSendMatchesServer() {}

// UnsafeSendMatchesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendMatchesServer will
// result in compilation errors.
type UnsafeSendMatchesServer interface {
	mustEmbedUnimplementedSendMatchesServer()
}

func RegisterSendMatchesServer(s grpc.ServiceRegistrar, srv SendMatchesServer) {
	s.RegisterService(&SendMatches_ServiceDesc, srv)
}

func _SendMatches_SendMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Match)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMatchesServer).SendMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMatches/SendMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMatchesServer).SendMatch(ctx, req.(*Match))
	}
	return interceptor(ctx, in, info, handler)
}

// SendMatches_ServiceDesc is the grpc.ServiceDesc for SendMatches service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendMatches_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SendMatches",
	HandlerType: (*SendMatchesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMatch",
			Handler:    _SendMatches_SendMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SendMatches/Match.proto",
}
